# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: ~test template

on:
  workflow_call:
    inputs:
      RUNNER:
        type: string
        description: Runner to use for test
        required: true
      TIMEOUT:
        type: number
        description: Max runtime of test in minutes
        required: false
        default: 10
      UNIT_TEST_SCRIPT:
        type: string
        description: Unit test script to execute
        required: true
      DOC_TEST_SCRIPT:
        type: string
        description: Doc test script to execute
        required: true
      FUNCTIONAL_TEST_SCRIPT:
        type: string
        description: Functional test script to execute
        required: true
      AFTER_SCRIPT:
        type: string
        description: Script to run after main test in container
        required: false
        default: ":"
      FINAL_SCRIPT_EXTERNAL:
        type: string
        description: Script to run after SCRIPT and AFTER_SCRIPT, but outside container (useful for logging)
        required: false
        default: ":"
      IS_OPTIONAL:
        type: boolean
        description: Failure will cancel all other tests if set to true
        required: false
        default: false
    secrets:
      HF_TOKEN:
        required: true
jobs:
  main:
    runs-on: ${{ inputs.RUNNER }}
    timeout-minutes: ${{ inputs.TIMEOUT }}
    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
    steps:
        - name: Docker system cleanup
          run: |
            docker system prune -a --filter "until=48h" --force || true

        - name: Docker pull image
          run: |
            docker pull nemoci.azurecr.io/nemo_rl_container:${{ github.run_id }}

        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            submodules: 'recursive'

        - name: Setup docker run command
          run: |
            GITHUB_ACTION_DIR=$(dirname $GITHUB_STEP_SUMMARY)
            DOCKER_RUN_CMD="docker run --rm -u root --runtime=nvidia --gpus all \
            --shm-size=64g \
            --env TRANSFORMERS_OFFLINE=0 \
            --env HYDRA_FULL_ERROR=1 \
            --env HF_HOME=/home/TestData/nemo-rl/hf_home \
            --env HF_DATASETS_CACHE=/home/TestData/nemo-rl/hf_datasets_cache \
            --env NEMO_RL_REPO_DIR=/opt/nemo-rl \
            --env HF_TOKEN \
            --volume $GITHUB_WORKSPACE:/opt/nemo-rl \
            --volume $GITHUB_ACTION_DIR:$GITHUB_ACTION_DIR \
            --volume /mnt/datadrive/TestData/nemo-rl/datasets:/opt/nemo-rl/datasets:ro \
            --volume /mnt/datadrive/TestData/nemo-rl/checkpoints:/home/TestData/nemo-rl/checkpoints:ro \
            --volume /mnt/datadrive/TestData/nemo-rl/hf_home/hub:/home/TestData/nemo-rl/hf_home/hub \
            --volume /mnt/datadrive/TestData/nemo-rl/hf_datasets_cache:/home/TestData/nemo-rl/hf_datasets_cache \
            nemoci.azurecr.io/nemo_rl_container:${{ github.run_id }}"
            echo "DOCKER_RUN_CMD=$DOCKER_RUN_CMD" >> $GITHUB_ENV

        - name: Run unit tests
          run: |
            $DOCKER_RUN_CMD bash -eux -o pipefail -c "
            git config --global --add safe.directory /opt/nemo-rl
            # This is needed since we create virtualenvs in the workspace, so this allows it to be cleaned up if necessary
            umask 000
            ${{ inputs.UNIT_TEST_SCRIPT }}"

        - name: Run doc tests
          run: |
            $DOCKER_RUN_CMD bash -eux -o pipefail -c "
            git config --global --add safe.directory /opt/nemo-rl
            # This is needed since we create virtualenvs in the workspace, so this allows it to be cleaned up if necessary
            umask 000
            ${{ inputs.DOC_TEST_SCRIPT }}"

        - name: Run functional tests
          run: |
            $DOCKER_RUN_CMD bash -eux -o pipefail -c "
            git config --global --add safe.directory /opt/nemo-rl
            # This is needed since we create virtualenvs in the workspace, so this allows it to be cleaned up if necessary
            umask 000
            ${{ inputs.FUNCTIONAL_TEST_SCRIPT }}"

        - name: Upload coverage report
          uses: actions/upload-artifact@v4
          with:
            name: unit-test-coverage-report
            path: ${{ github.workspace }}/tests/coverage.json
            retention-days: 7

        - uses: "NVIDIA/NeMo/.github/actions/cancel-workflow@main"
          if: failure()

        - name: after_script
          if: always() && inputs.AFTER_SCRIPT != ':'
          run: |
            # Run the after script
            cmd=$(cat <<"RUN_TEST_EOF"
            ${{ inputs.AFTER_SCRIPT }}
            RUN_TEST_EOF
            )
            GITHUB_ACTION_DIR=$(dirname $GITHUB_STEP_SUMMARY)
            docker run --rm \
            --env GITHUB_STEP_SUMMARY \
            --volume $GITHUB_ACTION_DIR:$GITHUB_ACTION_DIR \
            --volume $GITHUB_WORKSPACE:/opt/nemo-rl \
            nemoci.azurecr.io/nemo_rl_container:${{ github.run_id }} bash -eux -o pipefail -c "$cmd"

        - name: final_script_external
          if: always() && inputs.FINAL_SCRIPT_EXTERNAL != ':'
          run: |
            cmd=$(cat <<"RUN_TEST_EOF"
            ${{ inputs.FINAL_SCRIPT_EXTERNAL }}
            RUN_TEST_EOF
            )
            bash -eux -o pipefail -c "$cmd"

        - name: Container shutdown
          if: always()
          run: |
            # Ensure any added files in the mounted directory are owned by the runner user to allow it to clean up
            docker run --rm nemoci.azurecr.io/nemo_rl_container:${{ github.run_id }} bash -c "find /opt/nemo-rl -path '/opt/nemo-rl/datasets' -prune -o -exec chown $(id -u):$(id -g) {} +"
